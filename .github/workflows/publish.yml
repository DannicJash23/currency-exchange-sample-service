name: SonarQube CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Stage 1: Build and Push Docker Image to AWS ECR
  build_and_push:
    name: Build and Push Docker Image to AWS ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Java Environment
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Authenticate Docker to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/currency-exchange-sample-service:${{ github.sha }} .

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/currency-exchange-sample-service:${{ github.sha }}

  # Stage 2: Build and Analyze with SonarQube
  build_and_analyze:
    name: Build and Analyze with SonarQube
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch entire history for accurate analysis

      # Step 2: Set up Java Environment
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # Step 3: Cache SonarQube Cloud packages
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Step 4: Cache Maven Dependencies
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Step 5: Build and Analyze with SonarQube
      - name: Build and Analyze with SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=kanth233_currency-exchange-sample-service \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -DskipTests

      # Step 6: Fail Pipeline on Quality Gate Failure
      - name: Quality Gate Check
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -u ${{ secrets.SONAR_TOKEN }} "${{ secrets.SONAR_URL }}/api/qualitygates/project_status?projectKey=kanth233_currency-exchange-sample-service" > quality-gate.json
          STATUS=$(jq -r '.projectStatus.status' quality-gate.json)
          echo "Quality Gate Status: $STATUS"
          if [ "$STATUS" != "OK" ]; then
            echo "SonarQube Quality Gate Failed. Failing the pipeline."
            exit 1
          fi

      # Step 7: Send Notification on Failure
      - name: Send Notification
        if: failure()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "Pipeline failed due to quality gate or coverage issues. Sending notification."
          aws sns publish --topic-arn ${{ secrets.SNS_TOPIC_ARN }} \
            --region $AWS_REGION \
            --message "Build failed for project: kanth233_currency-exchange-sample-service due to quality gate failure or insufficient coverage."
      # Step 8: Deploy Application (e.g., using kubectl or other deployment tools)
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.23.0/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Create kube directory
        run: mkdir -p $HOME/.kube

      - name: Configure kubectl
        run: echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment-dev.yaml

  deploy_prod:
    name: Deploy to Production (Manual Approval Required)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Wait for Manual Approval
        uses: pmatseykanets/wait-for-approval-action@v1.0.0
        with:
          approval-required: true

      # Step 3: Deploy Application to EKS (Prod)
      - name: Deploy Application to EKS (Prod)
        run: |
          kubectl apply -f k8s/prod/development.yaml
