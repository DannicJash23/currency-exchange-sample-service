name: SonarQube Cloud

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and Analyze
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch entire history for accurate analysis

      # Step 2: Set up Java Environment
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Other distributions like 'temurin' can be used.

      # Step 3: Cache SonarQube Cloud Packages
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Step 4: Cache Maven Dependencies
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Step 5: Run JUnit Tests with Code Coverage
      - name: Run Tests with Code Coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn clean test jacoco:report
          COVERAGE=$(grep -oP '(?<=<line-rate>)[0-9.]+(?=</line-rate>)' target/site/jacoco/index.html | awk '{print $1 * 100}')
          echo "Code Coverage: $COVERAGE%"
          if [ "${COVERAGE%.*}" -lt 80 ]; then
            echo "Code coverage below 80%. Failing the pipeline."
            exit 1
          fi

      # Step 6: Build and Analyze with SonarQube
      - name: Build and Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Required for PR analysis
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # SonarQube authentication
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=kanth233_currency-exchange-sample-service \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} -DskipTests

      # Step 7: Fail Pipeline on Quality Gate Failure
      - name: Quality Gate Check
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -u ${{ secrets.SONAR_TOKEN }} "${{ secrets.SONAR_URL }}/api/qualitygates/project_status?projectKey=kanth233_currency-exchange-sample-service" > quality-gate.json
          STATUS=$(jq -r '.projectStatus.status' quality-gate.json)
          echo "Quality Gate Status: $STATUS"
          if [ "$STATUS" != "OK" ]; then
            echo "SonarQube Quality Gate Failed. Failing the pipeline."
            exit 1
          fi

      # Step 8: Notify on Failure
      - name: Send Notification
        if: failure()
        run: |
          echo "Pipeline failed due to quality gate or coverage issues. Sending notification."
          aws sns publish --topic-arn ${{ secrets.SNS_TOPIC_ARN }} \
            --message "Build failed for project: kanth233_currency-exchange-sample-service due to quality gate failure or insufficient coverage."
