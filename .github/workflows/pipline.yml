name: EKS Deployment Pipeline

on:
  push:
    branches:
      - dev
      - qa
      - main

jobs:
  # Stage 1: Build Docker Image and Run Trivy Security Scan
  build_and_scan:
    name: Build Docker Image and Run Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Java Environment
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2  # Upgraded to v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/currency-exchange-sample-service:${{ github.sha }} .

      - name: Authenticate Docker to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Run Trivy Scan on Docker Image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/currency-exchange-sample-service:${{ github.sha }}
          format: 'json'  # Output format to JSON for easier parsing
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          output: trivy-report.json  # Save results to a JSON file

      - name: Warn on Critical Vulnerabilities (Don't Fail)
        run: |
          if grep -q "CRITICAL" trivy-report.json; then
            echo "Warning: Critical vulnerabilities found, but continuing pipeline."
            cat trivy-report.json  # Optionally, print the full report
          fi

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/currency-exchange-sample-service:${{ github.sha }}

  # Stage 2: Quality Checks
  quality_checks:
    name: Quality Checks
    needs: build_and_scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: [junit, sonarqube]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run JUnit Tests
        if: matrix.tool == 'junit'
        run: |
          mvn test
          COVERAGE=$(grep -oP '(?<=<line-rate>)[0-9.]+(?=</line-rate>)' target/site/jacoco/index.html | awk '{print $1 * 100}')
          echo "Coverage: $COVERAGE%"
          if [ "${COVERAGE%.*}" -lt 80 ]; then
            echo "Coverage below 80%. Failing pipeline."
            exit 1
          fi

      - name: SonarQube Analysis
        if: matrix.tool == 'sonarqube'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=myproject \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  # Stage 3: Deploy to Dev and QA
  deploy:
    name: Deploy to Dev and QA
    needs: [quality_checks, build_and_scan]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [dev, qa]
    steps:
      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name docker-cluster

      - name: Deploy to Environment
        run: |
          kubectl apply -f k8s/${{ matrix.env }}/

  # Stage 4: Deploy to Production
  deploy_prod:
    name: Deploy to Production
    needs: [quality_checks, build_and_scan]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Manual Approval
        uses: hmarr/auto-approve-action@v3
        with:
          approval: manual

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name docker-cluster

      - name: Deploy to Production
        run: |
          kubectl apply -f k8s/prod/
