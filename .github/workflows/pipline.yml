name: EKS Multi-Environment Deployment

on:
  push:
    branches:
      - dev
      - qa
      - main

env:
  IMAGE_NAME: currency-exchange-sample-service

jobs:
  # Stage 1: Build and Scan Docker Image
  build_and_scan:
    name: Build and Scan Docker Image
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Java Environment
      - name: Set up Java Environment
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Build Application with Maven
      - name: Build with Maven
        run: mvn clean install -DskipTests

      # Step 4: Set up AWS credentials
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 5: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ github.sha }} .

      # Step 6: Scan Docker Image for Vulnerabilities
      - name: Scan Docker Image with Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          ./trivy image --exit-code 1 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # Step 7: Authenticate Docker to ECR
      - name: Authenticate Docker to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Step 8: Push Docker Image to ECR
      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # Stage 2: Deploy to Dev Environment
  deploy_dev:
    name: Deploy to Dev Environment
    needs: build_and_scan
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up AWS credentials
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Deploy to EKS (Dev)
      - name: Deploy to EKS
        run: |
          kubectl set image deployment/currency-exchange-sample-service \
          currency-exchange-sample-service=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ github.sha }} --namespace=dev

  # Stage 3: Deploy to QA Environment
  deploy_qa:
    name: Deploy to QA Environment
    needs: deploy_dev
    runs-on: ubuntu-latest
    steps:
      # Repeat steps for QA as above, setting namespace to "qa"

  # Stage 4: Deploy to Production (Manual Approval)
  deploy_prod:
    name: Deploy to Prod Environment
    needs: deploy_qa
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Manual Approval
        uses: hmarr/auto-approve-action@v3
        with:
          approval-message: "Approve deployment to production"

      # Repeat deployment steps with namespace "prod"
