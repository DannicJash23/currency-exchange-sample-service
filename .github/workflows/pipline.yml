name: EKS Deployment Pipeline

on:
  push:
    branches:
      - dev
      - qa 
      - prod

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Java Environment
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean install

      - name: Authenticate Docker to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/currency-exchange-sample-service:${{ github.sha }} .

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/currency-exchange-sample-service:${{ github.sha }}

  quality_check:
    name: Quality Assurance (JUnit & SonarQube)
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: [junit, sonarqube]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run JUnit Tests
        if: matrix.tool == 'junit'
        run: mvn test

      - name: SonarQube Analysis
        if: matrix.tool == 'sonarqube'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=myproject \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Validate Coverage
        run: |
          COVERAGE=$(grep -oP '(?<=<line-rate>)[0-9.]+(?=</line-rate>)' target/site/jacoco/index.html | awk '{print $1 * 100}')
          if [ "${COVERAGE%.*}" -lt 80 ]; then
            echo "Test coverage below 80%. Terminating pipeline."
            exit 1
          fi

  security_scan:
    name: Security Scans (Trivy & TFLint)
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Docker Image Scan with Trivy
        run: |
          trivy image ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/currency-exchange-sample-service:${{ github.sha }} > scan_results.json
          if grep -q "CRITICAL" scan_results.json; then
            echo "Critical vulnerabilities found. Terminating pipeline."
            exit 1
          fi

      - name: Run TFLint
        run: tflint

  deploy_dev:
    name: Deploy to EKS (Dev)
    needs: [quality_check, security_scan]
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Dev Environment
        run: |
          kubectl apply -f k8s/dev/

  deploy_qa:
    name: Deploy to EKS (QA)
    needs: [quality_check, security_scan]
    if: github.ref == 'refs/heads/qa'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to QA Environment
        run: |
          kubectl apply -f k8s/qa/

  deploy_prod:
    name: Deploy to EKS (Prod)
    needs: [quality_check, security_scan]
    if: github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    steps:
      - name: Manual Approval for Production
        uses: hmarr/auto-approve-action@v3
        with:
          approval: manual

      - name: Deploy to Production Environment
        run: |
          kubectl apply -f k8s/prod/
