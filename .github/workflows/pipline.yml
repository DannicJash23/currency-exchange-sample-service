name: EKS Deployment Pipeline

on:
  pull_request:
    branches:
      - dev
      - qa
      - main

jobs:
  # Stage 1: Build Docker Image and Run Trivy Security Scan
  build_and_scan:
    name: Build Docker Image and Run Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Java Environment
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/currency-exchange-sample-service:${{ github.sha }} .

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.40.0/trivy_0.40.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.40.0_Linux-64bit.deb

      - name: Scan Docker Image with Trivy
        id: scan-image
        run: |
          trivy image --format json --output scan-results.json ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/currency-exchange-sample-service:${{ github.sha }}

      - name: Extract high and critical vulnerabilities
        id: extract_vulnerabilities
        run: |
          jq -r '
          def hr(severity):
            if severity == "HIGH" or severity == "CRITICAL" then true else false end;
          def to_md:
            "| " + (.VulnerabilityID // "") + " | " + (.PkgName // "") + " | " + (.InstalledVersion // "") + " | " + (.Severity // "") + " | " + (.Title // "") + " |";
          [
            "# Docker Image Scan Results",
            "",
            "## High and Critical Vulnerabilities",
            "",
            "| Vulnerability ID | Package | Version | Severity | Description |",
            "| --- | --- | --- | --- | --- |",
            (.Results[] | .Vulnerabilities[] | select(hr(.Severity)) | to_md),
            ""
          ] | join("\n")
          ' scan-results.json > vulnerability-report.md

      - name: Capture scan results
        id: capture_results
        run: |
          content=$(cat vulnerability-report.md | head -c 65000)
          echo "report<<EOF" >> $GITHUB_ENV
          echo "$content" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Upload scan results
        uses: actions/upload-artifact@v2
        with:
          name: vulnerability-report
          path: vulnerability-report.md

      - name: Comment scan results on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: Docker Image Scan Results
          message: |
            Trivy scan report:
            ${{ env.report }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Authenticate Docker to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/currency-exchange-sample-service:${{ github.sha }}

  # Stage 2: Quality Checks
  quality_checks:
    name: Quality Checks
    needs: build_and_scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: [junit, sonarqube]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run JUnit Tests
        if: matrix.tool == 'junit'
        run: |
          mvn test
          COVERAGE=$(grep -oP '(?<=<line-rate>)[0-9.]+(?=</line-rate>)' target/site/jacoco/index.html | awk '{print $1 * 100}')
          echo "Coverage: $COVERAGE%"
          if [ "${COVERAGE%.*}" -lt 80 ]; then
            echo "Coverage below 80%. Failing pipeline."
            exit 1
          fi

      - name: SonarQube Analysis
        if: matrix.tool == 'sonarqube'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=myproject \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  # Stage 3: Deploy to Dev and QA
  deploy:
    name: Deploy to Dev and QA
    needs: [quality_checks, build_and_scan]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [dev, qa]
    steps:
      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name docker-cluster

      - name: Deploy to Environment
        run: |
          kubectl apply -f k8s/${{ matrix.env }}/

  # Stage 4: Deploy to Production
  deploy_prod:
    name: Deploy to Production
    needs: [quality_checks, build_and_scan]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Manual Approval
        uses: hmarr/auto-approve-action@v3
        with:
          approval: manual

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name docker-cluster

      - name: Deploy to Production
        run: |
          kubectl apply -f k8s/prod/
